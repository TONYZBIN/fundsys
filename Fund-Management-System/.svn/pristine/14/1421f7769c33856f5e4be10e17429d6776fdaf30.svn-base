package edu.fjut.fundsys.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.struts2.json.annotations.JSON;

import edu.fjut.fundsys.domain.AdminUser;
import edu.fjut.fundsys.domain.ClientUser;
import edu.fjut.fundsys.domain.Feature;
import edu.fjut.fundsys.domain.Fund;
import edu.fjut.fundsys.exception.DataAccessException;
import edu.fjut.fundsys.jwt.Jwt;
import edu.fjut.fundsys.service.AdminUserService;
import edu.fjut.fundsys.service.SetRateService;

/**
 * 后台管理员Action
 * @author Guo
 *包括：
 *后台管理员登录
 *添加基金操作
 *查看基金列表
 *修改基金信息
 *删除（下架）基金产品
 *批量删除基金产品
 *获取客户信息表
 *冻结/解冻客户
 *广告添加
 */
public class AdminUserAction extends BaseAction {
	private String userNo;
	private String userPwd;
	/* */
	private AdminUserService adminUserService;
	private SetRateService setRateService;
	/* 登录操作返回token */
	private String token;
	/*
	 * 基金对象： fund.FundName; fund.FundPrice; fund.FundDescribe; fund.date
	 */
	private Fund fund;
     
	private Map<String, Object> data = null;
	private int resultcode;
	private String message;

	private List<Fund> fundList;
	private List<ClientUser> clientList;

	private String fundNoArr;
    
	private String clientId;
	private String active;
	
    private String featureTitle;
    private String featureDescribe;
    private String featureInfo;
    
   

	public void setFeatureTitle(String featureTitle) {
		this.featureTitle = featureTitle;
	}

	public void setFeatureDescribe(String featureDescribe) {
		this.featureDescribe = featureDescribe;
	}

	public void setFeatureInfo(String featureInfo) {
		this.featureInfo = featureInfo;
	}

	public void setClientId(String clientId) {
		this.clientId = clientId;
	}

	public void setActive(String active) {
		this.active = active;
	}

	public void setSetRateService(SetRateService setRateService) {
		this.setRateService = setRateService;
	}

	public void setFundNoArr(String fundNoArr) {
		this.fundNoArr = fundNoArr;
	}

	public Map<String, Object> getData() {
		return data;
	}

	public int getResultcode() {
		return resultcode;
	}

	public String getMessage() {
		return message;
	}

	public void setFund(Fund fund) {
		this.fund = fund;
	}

	@JSON(serialize = false)
	public Fund getFund() {
		return fund;
	}

	public void setAdminUserService(AdminUserService adminUserService) {
		this.adminUserService = adminUserService;
	}

	public void setUserNo(String userNo) {
		this.userNo = userNo;
	}

	public void setUserPwd(String userPwd) {
		this.userPwd = userPwd;
	}

	/**
	 * 操作员登录操作 如果用户名和密码正确，生成一个token返回
	 * 
	 * @return
	 */
	public String adminLogin() {
		// System.out.println(ServletActionContext.getRequest().getRequestURI());
		data = new HashMap<String, Object>();

		AdminUser adminUser = new AdminUser();
		adminUser.setUserNo(userNo);
		adminUser.setUserPwd(userPwd);
		try {
			adminUserService.checkUser(adminUser);
			Map<String, Object> payload = new HashMap<String, Object>();
			Date date = new Date();
			payload.put("uid", userNo);// 用户ID
			payload.put("iat", date.getTime());// 生成时间
			payload.put("ext", date.getTime() + 1000 * 60 * 60);// 过期时间1小时
			token = Jwt.createToken(payload);
			data.put("token", token);
			data.put("userNo", userNo);
			resultcode = 0;
			message = "认证成功";
		} catch (DataAccessException e) {
			data.put("userNo", userNo);
			resultcode = -1;
			message = e.getMessage();
		}

		return "adminlogin";
	}

	/**
	 * 添加基金操作 需要携带token进行身份验证
	 */
	public String adminFundAdd() {
		// fund.FundName (基金发行总价)fund.FundPrice fund.FundDescribe fund.Date fund.rate
		data = new HashMap<String, Object>();
		// System.out.println(fund.getDate());
		try {
			adminUserService.fundAdd(fund);
			data.put("FundName", fund.getFundName());
			resultcode = 0;
			message = "添加成功";
		} catch (DataAccessException e) {
			data.put("FundName", fund.getFundName());
			resultcode = -1;
			message = e.getMessage();
		}

		return "fundadd";
	}

	/**
	 * 查看基金列表
	 */
	public String adminLoadFund() {
		setRateService.setRate();
		data = new HashMap<String, Object>();
		fundList = new ArrayList<Fund>();
		fundList = adminUserService.fundList();
		Integer fundTotleNum = fundList.size();
		data.put("FundList", fundList);
		data.put("fundTotleNum", fundTotleNum);
		resultcode = 0;
		message = "返回成功";
		return "loadfund";
	}

	/**
	 * 修改基金信息
	 * 
	 */
	public String adminUpdateFund() {
		// fund.FundNo fund.FundName fund.FundPrice fund.FundDescribe
		// fund.FundStatus
		data = new HashMap<String, Object>();
		adminUserService.updateFund(fund);
		data.put("FundNo", fund.getFundNo());
		resultcode = 0;
		message = "修改成功";
		return "fundupdate";
	}

	/**
	 * 下架（删除）基金产品
	 */
	public String adminDeleteFund() {
		// fund.FundNo
		data = new HashMap<String, Object>();
		adminUserService.deleteFund(fund.getFundNo());
		data.put("FundNo", fund.getFundNo());
		resultcode = 0;
		message = "删除成功";

		return "funddelete";
	}

	/**
	 * 批量删除基金产品
	 */
	public String adminBatchDelete() {
		// fundNoArr
		data = new HashMap<String, Object>();
		adminUserService.batchDeleteFund(fundNoArr);
		data.put("FundNoArr", fundNoArr);
		resultcode = 0;
		message = "批量删除成功";
		return "batchdelete";
	}

	/**
	 * 获取客户信息列表
	 */
	public String adminGetClientList() {
		data = new HashMap<String, Object>();
		clientList = new ArrayList<ClientUser>();
		clientList = adminUserService.clientList();
		Integer clientTotleNum = clientList.size();
		data.put("clientList", clientList);
		data.put("clientTotleNum", clientTotleNum);
		resultcode = 0;
		message = "返回成功";
		return "loadclient";
	}
	/**
	 * 冻结/解冻用户
	 */
    public String adminFrozenOrThawClient(){
    	//clientId   active
    	data = new HashMap<String, Object>();
    	adminUserService.frezonOrThawClient(clientId, active);
		data.put("clientId", clientId);
		resultcode = 0;
		if("true".equals(active))
		message = "解冻成功";
		else 
		message="冻结成功";
    	return "frozenorthaw";
    }
    
    /**
     * 添加广告
     */
    public String adminAddFeature(){
    	//featureTitle     featureDescribe     featureInfo
    	data = new HashMap<String, Object>();
    	adminUserService.featureAdd(new Feature(featureTitle,featureDescribe,featureInfo));
    	data.put("featureTitle",featureTitle);
    	message="广告添加成功";
    	resultcode=0;
    	return "addfeature";
    }
}
