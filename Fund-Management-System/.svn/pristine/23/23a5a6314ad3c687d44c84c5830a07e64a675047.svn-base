package edu.fjut.fundsys.dao;

import java.util.List;

import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import edu.fjut.fundsys.domain.AdminUser;
import edu.fjut.fundsys.domain.ClientUser;
import edu.fjut.fundsys.domain.Fund;
import edu.fjut.fundsys.exception.DataAccessException;

public class AdminUserDaoImpl extends HibernateDaoSupport implements
		AdminUserDao {

	/**
	 * 检测用户是否存在
	 * 检测用户名和密码是否正确
	 */
	@Override
	public void checkUser(AdminUser user) {

		AdminUser adminUser = (AdminUser) this.getHibernateTemplate().get(
				AdminUser.class, user.getUserNo());

		if (adminUser == null) {
			throw new DataAccessException("用户不存在");
		}
		;
		if (!adminUser.getUserPwd().equals(user.getUserPwd())) {
			throw new DataAccessException("用户存在,但密码错误");
		}

	}
   /**
    * 增加基金
    */
	@Override
	public void fundAdd(Fund fund) {
		try {
			this.getHibernateTemplate().save(fund);
		} catch (Exception e) {
			throw new DataAccessException("基金名已经存在");
		}

	}
  /**
   * 基金列表
   */
	@Override
	public List<Fund> fundList() {
		
		return this.getHibernateTemplate().find(
				"from Fund f order by f.FundNo desc");
	}
   /**
    * 根据ID号查找基金
    */
	@Override
	public Fund getFundById(Integer FundNo) {
		return (Fund) this.getHibernateTemplate().get(Fund.class, FundNo);
	}
    /**
     * 更新基金
     */
	@Override
	public void updateFund(Fund fund) {
		Fund newFund = this.getFundById(fund.getFundNo());
		newFund.setFundName(fund.getFundName());
		newFund.setFundPrice(fund.getFundPrice());
		newFund.setFundDescribe(fund.getFundDescribe());
		newFund.setFundStatus(fund.getFundStatus());
		newFund.setRate(fund.getRate());
		this.getHibernateTemplate().update(newFund);
	}
    /**
     * 删除基金
     */
	@Override
	public void deleteFund(Integer fundNo) {
		Fund fund = this.getFundById(fundNo);
		this.getHibernateTemplate().delete(fund);

	}
    /**
     * 批量删除基金
     */
	@Override
	public void batchDeleteFund(List<Integer> fundNoList) {
		for (Integer integer : fundNoList) {
			Fund fund = this.getFundById(integer);
			this.getHibernateTemplate().delete(fund);
		}

	}
	/**
	 * 获取客户信息列表
	 */
	@Override
	public List<ClientUser> clientList() {
		return this.getHibernateTemplate().find(
				"from ClientUser c order by c.ClientId desc");
	}
	

}
